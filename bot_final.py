
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import time

# –í–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –±–∞–ª–ª—ã
questions = [
    {
        "text": "–ö–∞–∫ –≤—ã —Å–µ–±—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç–µ –≤ –≥–µ–Ω–¥–µ—Ä–Ω–æ–º –ø–ª–∞–Ω–µ?",
        "options": ["–¶–∏—Å–≥–µ–Ω–¥–µ—Ä", "–¢—Ä–∞–Ω—Å–≥–µ–Ω–¥–µ—Ä", "–ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞", "–ù–∏–∫–∞–∫"],
        "scores": [1, 1, 1, 0]
    },
    {
        "text": "–ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏?",
        "options": ["–î–∞", "–ù–µ—Ç"],
        "scores": [1, 0]
    },
    {
        "text": "–í–∞—Å –∫–æ–≥–¥–∞-–ª–∏–±–æ –æ—Ç–º–µ–Ω—è–ª–∏?",
        "options": ["–î–∞", "–ù–µ—Ç"],
        "scores": [1, 0]
    },
    {
        "text": "–í—ã –¥–µ–ª–∞–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–º–∏–Ω–≥-–∞—É—Ç?",
        "options": ["–î–∞", "–ù–µ—Ç"],
        "scores": [1, 0]
    },
    {
        "text": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–∏—Ä—Å–∏–Ω–≥?",
        "options": ["–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ", "–¢–æ–ª—å–∫–æ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞", "–¢–æ–ª—å–∫–æ –ø–∏—Ä—Å–∏–Ω–≥", "–ù–µ—Ç"],
        "scores": [2, 1, 1, 0]
    }
]

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    user_data[user_id] = {"current_q": 0, "score": 0}
    send_question(update, context)

def send_question(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    q_index = user_data[user_id]["current_q"]

    if q_index < len(questions):
        q = questions[q_index]
        reply_markup = ReplyKeyboardMarkup.from_row(q["options"], one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text(q["text"], reply_markup=reply_markup)
    else:
        score = user_data[user_id]["score"]
        if score <= 3:
            result = (
                "```
"
                "SYSTEM RESPONSE:
"
                "–ó–∞–π–º–∏—Å—å, —á–µ–º-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–∏–º
"
                "–∞ —Ö–∞ —Ö–∞ —Ö–∞ —Ö–∞—Ö–∞—Ö–∞ –∞—Ö–∞—Ö–∞ —Ö–∞—Ö–∞—Ö–∞
"
                "```"
            )
            audio_file = "1.mp3"
        else:
            result = (
                "```
"
                "SYSTEM RESPONSE:
"
                "–¢—ã –∑–≤–µ–∑–¥–∞, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≤—Å–µ—Ö
"
                "```"
            )
            audio_file = "2.mp3"

        context.bot.send_message(chat_id=user_id, text="üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...")
        time.sleep(1.2)
        context.bot.send_message(chat_id=user_id, text="‚öôÔ∏è –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        time.sleep(1.2)
        context.bot.send_message(chat_id=user_id, text="üß† –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
        time.sleep(1.2)
        context.bot.send_message(chat_id=user_id, text="üí° –ì–æ—Ç–æ–≤–æ!")
        time.sleep(0.8)
        context.bot.send_message(chat_id=user_id, text=result, parse_mode='Markdown')
        try:
            context.bot.send_audio(chat_id=user_id, audio=open(audio_file, 'rb'))
        except Exception as e:
            context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

        user_data.pop(user_id, None)

def handle_response(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if user_id not in user_data:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞.")
        return

    q_index = user_data[user_id]["current_q"]
    answer = update.message.text
    q = questions[q_index]

    if answer not in q["options"]:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    selected_index = q["options"].index(answer)
    user_data[user_id]["score"] += q["scores"][selected_index]
    user_data[user_id]["current_q"] += 1
    send_question(update, context)

def main():
    import os
    TOKEN = os.environ.get("TOKEN")  # <-- Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_response))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
